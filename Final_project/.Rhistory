theme_void() +
theme(legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(family = "Times"),
plot.title = element_text(family = "Times"),
plot.subtitle = element_text(family = "Times"),
plot.caption = element_text(hjust = 1,family='Times',size=8))
state_poor_map
# read in data
childcare_costs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/childcare_costs.csv')
counties <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/counties.csv')
# Merge these two datasets together according to the county_fips_code
childcare <- left_join(childcare_costs, counties, by = "county_fips_code")
# Average poverty rate for families at the state level in 2008
state_poor <- childcare %>%
subset(study_year == 2008) %>%
group_by(state_name) %>%
summarise(Avg_poor = mean(pr_f, na.rm = TRUE))
# state level shapefiles (see function documentation to customize)
st_shape <- tigris::states()
# Merge the poverty rate data with state-level shapefiles
state_poor_map <- merge(st_shape, state_poor, by.x = "NAME", by.y = "state_name")
state_poor_map
# Import libraries
library(tidyverse)
library(countrycode)
library(tidycensus) # loads in library(tigris) as a dependency
library(rnaturalearth)
library(sf)
# get country data from rnaturalearth
world_ne <- rnaturalearth::ne_download(
scale = 110,
type = "countries",
category = "cultural",
returnclass = "sf"
)
# Import dataset
df <- read_csv("global_power_plant_database.csv",show_col_types = FALSE)
# Subset to only America
df1 <- df %>%
filter(continent == 'Americas')
# Calculate the distribution of energy type
df1_counts <- df1 %>%
group_by(country, country_long, renewable) %>%
summarise(count = n()) %>%
arrange(country,country_long, renewable)
# Create a new dataset with the renewable energy type information
df1_counts1 <- df1_counts %>%
group_by(country) %>%
mutate(type = ifelse(
any(renewable == "Non-Renewable Energy" & count >= sum(count) / 2),
"Majority non-renewable",
"Majority renewable")) %>%
select(country,country_long, type) %>%
distinct()
# Merge power plant data with world shapefiles
df_americas <- left_join(df1_counts1, world_ne, by = c("country" = "ISO_A3"))
# Get the latitude and longitude of Canada
long <- df_americas[df_americas$country_long == 'Canada', ]$LABEL_X
lat <- df_americas[df_americas$country_long == 'Canada', ]$LABEL_Y
# Create a map
ggplot(data = df_americas) +
geom_sf(aes(geometry = geometry,fill = type), color = "black") +
scale_fill_manual(values = c("#1f78b4", "#b2df8a")) +
labs(title = "Distribution of Majority Energy Types in the Americas",
subtitle = "As of June 2, 2021",
caption = "Data Source: Global Power Plant Database") +
annotate("text", x =long , y = lat, label = "Canada", family = "Times", size = 4,color='black') +
theme_void() +
theme(legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(family = "Times"),
plot.title = element_text(family = "Times"),
plot.subtitle = element_text(family = "Times"),
plot.caption = element_text(hjust = 1,family='Times',size=8))
# Import libraries
library(tidyverse)
library(countrycode)
library(tidycensus) # loads in library(tigris) as a dependency
library(rnaturalearth)
library(sf)
# get country data from rnaturalearth
world_ne <- rnaturalearth::ne_download(
scale = 110,
type = "countries",
category = "cultural",
returnclass = "sf"
)
# Import dataset
df <- read_csv("global_power_plant_database.csv",show_col_types = FALSE)
# Subset to only America
df1 <- df %>%
filter(continent == 'Americas')
# Calculate the distribution of energy type
df1_counts <- df1 %>%
group_by(country, country_long, renewable) %>%
summarise(count = n()) %>%
arrange(country,country_long, renewable)
# Create a new dataset with the renewable energy type information
df1_counts1 <- df1_counts %>%
group_by(country) %>%
mutate(type = ifelse(
any(renewable == "Non-Renewable Energy" & count >= sum(count) / 2),
"Majority non-renewable",
"Majority renewable")) %>%
select(country,country_long, type) %>%
distinct()
# Merge power plant data with world shapefiles
df_americas <- left_join(df1_counts1, world_ne, by = c("country" = "ISO_A3"))
# read in data
childcare_costs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/childcare_costs.csv')
counties <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/counties.csv')
# Merge these two datasets together according to the county_fips_code
childcare <- left_join(childcare_costs, counties, by = "county_fips_code")
# Average poverty rate for families at the state level in 2008
state_poor <- childcare %>%
subset(study_year == 2008) %>%
group_by(state_name) %>%
summarise(Avg_poor = mean(pr_f, na.rm = TRUE))
# state level shapefiles (see function documentation to customize)
st_shape <- tigris::states()
# Merge the poverty rate data with state-level shapefiles
state_poor_map <- merge(st_shape, state_poor, by.x = "NAME", by.y = "state_name")
ggplot() +
geom_sf(data = state_poor_map, aes(fill = Avg_poor)) +
geom_text(data = state_poor_map, aes(label = NAME), size = 3, color = "black") +
coord_sf(xlim = c(-170, -60), ylim = c(20, 80)) +
labs(title = "Average Poverty Rate for Families in the Americas",
subtitle = "Based on US Population in 2008",
caption = "Data Source: the National Database of Childcare Prices") +
scale_fill_viridis_c(
option = "D",
name = "Average Poverty Rate",
direction = -1,
limits = c(0, 20),
breaks = seq(0, 20, by = 5),
) +
theme_void() +
theme(text = element_text(family = "Times", size = 10),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 6),
plot.title = element_text(size = 16, hjust = 0),
plot.subtitle = element_text(size = 12, hjust = 0),
plot.caption = element_text(size = 8, hjust = 1))
state_poor_map
ggplot() +
geom_sf(data = state_poor_map, aes(fill = Avg_poor)) +
geom_text(data = state_poor_map, aes(X, Y, label = NAME), colour = "white",size=3)+
coord_sf(xlim = c(-170, -60), ylim = c(20, 80)) +
labs(title = "Average Poverty Rate for Families in the Americas",
subtitle = "Based on US Population in 2008",
caption = "Data Source: the National Database of Childcare Prices") +
scale_fill_viridis_c(
option = "D",
name = "Average Poverty Rate",
direction = -1,
limits = c(0, 20),
breaks = seq(0, 20, by = 5),
) +
theme_void() +
theme(text = element_text(family = "Times", size = 10),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 6),
plot.title = element_text(size = 16, hjust = 0),
plot.subtitle = element_text(size = 12, hjust = 0),
plot.caption = element_text(size = 8, hjust = 1))
ggplot() +
geom_sf(data = state_poor_map, aes(fill = Avg_poor)) +
geom_sf_text(aes(label = NAME), colour = "white",size=3)+
coord_sf(xlim = c(-170, -60), ylim = c(20, 80)) +
labs(title = "Average Poverty Rate for Families in the Americas",
subtitle = "Based on US Population in 2008",
caption = "Data Source: the National Database of Childcare Prices") +
scale_fill_viridis_c(
option = "D",
name = "Average Poverty Rate",
direction = -1,
limits = c(0, 20),
breaks = seq(0, 20, by = 5),
) +
theme_void() +
theme(text = element_text(family = "Times", size = 10),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 6),
plot.title = element_text(size = 16, hjust = 0),
plot.subtitle = element_text(size = 12, hjust = 0),
plot.caption = element_text(size = 8, hjust = 1))
state_poor_map
ggplot(data = state_poor_map) +
geom_sf(aes(fill = Avg_poor)) +
geom_sf_text(aes(label = NAME), colour = "white", size=3)+
coord_sf(xlim = c(-170, -60), ylim = c(20, 80)) +
labs(title = "Average Poverty Rate for Families in the Americas",
subtitle = "Based on US Population in 2008",
caption = "Data Source: the National Database of Childcare Prices") +
scale_fill_viridis_c(
option = "D",
name = "Average Poverty Rate",
direction = -1,
limits = c(0, 20),
breaks = seq(0, 20, by = 5),
) +
theme_void() +
theme(text = element_text(family = "Times", size = 10),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 6),
plot.title = element_text(size = 16, hjust = 0),
plot.subtitle = element_text(size = 12, hjust = 0),
plot.caption = element_text(size = 8, hjust = 1))
ggplot(data = state_poor_map) +
geom_sf(aes(fill = Avg_poor)) +
geom_sf_text(aes(label = NAME), colour = "black", size=1)+
coord_sf(xlim = c(-170, -60), ylim = c(20, 80)) +
labs(title = "Average Poverty Rate for Families in the Americas",
subtitle = "Based on US Population in 2008",
caption = "Data Source: the National Database of Childcare Prices") +
scale_fill_viridis_c(
option = "D",
name = "Average Poverty Rate",
direction = -1,
limits = c(0, 20),
breaks = seq(0, 20, by = 5),
) +
theme_void() +
theme(text = element_text(family = "Times", size = 10),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 6),
plot.title = element_text(size = 16, hjust = 0),
plot.subtitle = element_text(size = 12, hjust = 0),
plot.caption = element_text(size = 8, hjust = 1))
state_poor_map
ggplot(data = state_poor_map) +
geom_sf(aes(fill = Avg_poor)) +
geom_sf_text(aes(label = STUSPS), colour = "black", size=2)+
coord_sf(xlim = c(-170, -60), ylim = c(20, 80)) +
labs(title = "Average Poverty Rate for Families in the Americas",
subtitle = "Based on US Population in 2008",
caption = "Data Source: the National Database of Childcare Prices") +
scale_fill_viridis_c(
option = "D",
name = "Average Poverty Rate",
direction = -1,
limits = c(0, 20),
breaks = seq(0, 20, by = 5),
) +
theme_void() +
theme(text = element_text(family = "Times", size = 10),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 6),
plot.title = element_text(size = 16, hjust = 0),
plot.subtitle = element_text(size = 12, hjust = 0),
plot.caption = element_text(size = 8, hjust = 1))
ggplot(data = state_poor_map) +
geom_sf(aes(fill = Avg_poor)) +
geom_sf_text(aes(label = STUSPS), colour = "black", size=0.8)+
coord_sf(xlim = c(-170, -60), ylim = c(20, 80)) +
labs(title = "Average Poverty Rate for Families in the Americas",
subtitle = "Based on US Population in 2008",
caption = "Data Source: the National Database of Childcare Prices") +
scale_fill_viridis_c(
option = "D",
name = "Average Poverty Rate",
direction = -1,
limits = c(0, 20),
breaks = seq(0, 20, by = 5),
) +
theme_void() +
theme(text = element_text(family = "Times", size = 10),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 6),
plot.title = element_text(size = 16, hjust = 0),
plot.subtitle = element_text(size = 12, hjust = 0),
plot.caption = element_text(size = 8, hjust = 1))
ggplot(data = state_poor_map) +
geom_sf(aes(fill = Avg_poor)) +
geom_sf_text(aes(label = STUSPS), colour = "black", size=0.8)+
#coord_sf(xlim = c(-170, -60), ylim = c(20, 80)) +
labs(title = "Average Poverty Rate for Families in the Americas",
subtitle = "Based on US Population in 2008",
caption = "Data Source: the National Database of Childcare Prices") +
scale_fill_viridis_c(
option = "D",
name = "Average Poverty Rate",
direction = -1,
limits = c(0, 20),
breaks = seq(0, 20, by = 5),
) +
theme_void() +
theme(text = element_text(family = "Times", size = 10),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 6),
plot.title = element_text(size = 16, hjust = 0),
plot.subtitle = element_text(size = 12, hjust = 0),
plot.caption = element_text(size = 8, hjust = 1))
shiny::runApp('Desktop/Study_Materials/Data_Visualization/Shiny_app')
install.packages("rgl")
library(rgl)
library(rgl)
install.packages("rgl")
library(rgl)
install.packages("OpenGL")
install.packages("rgl")
library(rgl)
remotes::install_github("dmurdoch/rgl")
install.packages("rgl")
library(rgl)
options(rgl.useNULL=TRUE)
.rs.restartR()
library("plot3Drgl")
install.packages("plot3Drgl")
library("plot3Drgl")
install.packages("plot3D")
library("plot3Drgl")
library(rgl)
library(rgl)
# Create sample data
data <- data.frame(
x = rnorm(100),
y = rnorm(100),
z = rnorm(100)
)
# Open a 3D device
rgl.open()
# Create a 3D scatter plot
plot3d(data$x, data$y, data$z, col = "blue", size = 3)
# Title and labels
title3d("My First 3D Plot")
axes3d()
# Prepare the data
data(iris)
head(iris)
# Set the 3-dimension variables
x <- sep.l <- iris$Sepal.Length
y <- pet.l <- iris$Petal.Length
z <- sep.w <- iris$Sepal.Width
# Create a basis 3D plot
rgl.open() # Open a new RGL device
rgl.points(x, y, z, color ="lightgray") # Scatter plot
# Prepare the data
data(iris)
head(iris)
# Set the 3-dimension variables
x <- sep.l <- iris$Sepal.Length
y <- pet.l <- iris$Petal.Length
z <- sep.w <- iris$Sepal.Width
# Create a basis 3D plot
open3d() # Open a new RGL device
points3d(x, y, z, color ="lightgray") # Scatter plot
# install.packages("rgl")
library(rgl)
# Prepare the data
data(iris)
head(iris)
# Set the 3-dimension variables
x <- sep.l <- iris$Sepal.Length
y <- pet.l <- iris$Petal.Length
z <- sep.w <- iris$Sepal.Width
# Create a basis 3D plot
open3d() # Open a new RGL device
points3d(x, y, z, color ="lightgray") # Scatter plot
# Prepare the data
data(iris)
head(iris)
# Set the 3-dimension variables
x <- sep.l <- iris$Sepal.Length
y <- pet.l <- iris$Petal.Length
z <- sep.w <- iris$Sepal.Width
# Create a basis 3D plot
open3d() # Open a new RGL device
points3d(x, y, z, color ="lightgray") # Scatter plot
install.packages("leaflet")
library(leaflet)
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the mapm <- leaflet() %>%
shiny::runApp('Desktop/Study_Materials/Data_Visualization/Shiny_app')
runApp('Desktop/Study_Materials/Data_Visualization/Pset3/problem-set-3-app')
runApp('Desktop/Study_Materials/Data_Visualization/Pset3/problem-set-3-app')
# Import dataset
df <- read_csv("global_power_plant_database.csv",show_col_types = FALSE)
runApp('Desktop/Study_Materials/Data_Visualization/Pset3/problem-set-3-app')
# Create a map with multiple popups
library(htmltools)
df <- read.csv(textConnection(
"Name,Lat,Long
Samurai Noodle,47.597131,-122.327298
Kukai Ramen,47.6154,-122.327157
Tsukushinbo,47.59987,-122.326726"))
leaflet(df) %>%
addTiles() %>%
addMarkers(~Long, ~Lat, popup = ~htmlEscape(Name))
# Get the geojson file
countries <- sf::st_read("https://rstudio.github.io/leaflet/json/countries.geojson")
outline <- quakes[chull(quakes$long, quakes$lat),]
map <- leaflet(quakes) %>%
# Base groups
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Stadia.StamenToner, group = "Toner") %>%
addProviderTiles(providers$Stadia.StamenTonerLite, group = "Toner Lite") %>%
# Overlay groups
addCircles(~long, ~lat, ~10^mag/5, stroke = F, group = "Quakes") %>%
addPolygons(data = outline, lng = ~long, lat = ~lat,
fill = F, weight = 2, color = "#FFFFCC", group = "Outline") %>%
# Layers control
addLayersControl(
baseGroups = c("OSM (default)", "Toner", "Toner Lite"),
overlayGroups = c("Quakes", "Outline"),
options = layersControlOptions(collapsed = FALSE))
# Install and load the package
#install.packages("leaflet")
library(leaflet)
outline <- quakes[chull(quakes$long, quakes$lat),]
map <- leaflet(quakes) %>%
# Base groups
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Stadia.StamenToner, group = "Toner") %>%
addProviderTiles(providers$Stadia.StamenTonerLite, group = "Toner Lite") %>%
# Overlay groups
addCircles(~long, ~lat, ~10^mag/5, stroke = F, group = "Quakes") %>%
addPolygons(data = outline, lng = ~long, lat = ~lat,
fill = F, weight = 2, color = "#FFFFCC", group = "Outline") %>%
# Layers control
addLayersControl(
baseGroups = c("OSM (default)", "Toner", "Toner Lite"),
overlayGroups = c("Quakes", "Outline"),
options = layersControlOptions(collapsed = FALSE))
map
states <- geojsonio::geojson_read("https://rstudio.github.io/leaflet/json/us-states.geojson", what = "sp")
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m1 <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m1 %>%
addPolygons()
m1 <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addTitle()
m1 <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addTiles()
m1 <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addTiles()
states <- geojsonio::geojson_read("https://rstudio.github.io/leaflet/json/us-states.geojson", what = "sp")
m1 <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addTiles()
m1 %>%
addPolygons()
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
m1 %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m1 %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright")
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
m1 %>%
addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m1 %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright")
m2 %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright")
# Create a choropleth map with multiple colors
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
m2 <- m1 %>%
addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m2
# Create a choropleth map with multiple colors and legend
m2 %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright")
shiny::runApp('Desktop/Study_Materials/Data_Visualization/Final_Project/Final_project')
runApp('Desktop/Study_Materials/Data_Visualization/Final_Project/Final_project')
shiny::runApp('Desktop/Study_Materials/Data_Visualization/Final_Project/Final_project')
